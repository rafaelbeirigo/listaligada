#+TITLE:     Análise de complexidade para Listas Ligadas Simples e Duplas
#+AUTHOR:    Martha Hilda Timoteo Sanchez, Rafael Lemes Beirigo
#+EMAIL:     {marthaht, rafaelb}@lncc.br

#+DESCRIPTION: Análise de complexidade para Listas Ligadas Simples e Duplas
#+KEYWORDS:  algoritmos, complexidade, listas ligadas, listas duplamente encadeadas
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:nil mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

#+STARTUP: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+BEAMER_FRAME_LEVEL: 2
#+LaTeX_HEADER: \mode<beamer>{\usetheme{CambridgeUS}\usecolortheme{whale}\usecolortheme{wolverine}}
#+LaTeX_HEADER: \begin{center}
#+LaTeX_HEADER: \includegraphics[height=50pt]{fig/LNCC_azul.jpg} \hspace*{-30pt}
#+LaTeX_HEADER: \end{center}
#+LaTeX_HEADER: \vspace*{-45pt}

* Listas Ligadas
** Simples
*** *Um* ponteiro: para o nó posterior
#+LATEX: \begin{center}
[[file:fig/listasimple.png]]
#+LATEX: \end{center}
- Percurso unidirecional
- Remoção necessita de dois ponteiros
** Dupla
:PROPERTIES:
:ID:       dc1fe14f-de86-42b9-996d-b090ff0b09b5
:END:
*** *Dois* ponteiros: para os nós anterior e posterior
#+LATEX: \begin{center}
[[file:fig/listadoble.png]]
#+LATEX: \end{center}
- Percurso bidirecional
- Remoção necessita de um ponteiro
** Ordem Crescente
:PROPERTIES:
:ID:       3dea5dcc-05b0-49ba-8b6a-a8b9ce1d286d
:END:
*** Controlado no momento da *inserção*
#+LATEX: \begin{center}
[[file:fig/listasimple.png]]
#+LATEX: \end{center}

#+LATEX: \begin{center}
[[file:fig/listadoble.png]]
#+LATEX: \end{center}
** Vantagens e Desvantagens
*** Lista Simples
#+LATEX: \begin{center}
[[file:fig/listasimple.png]]
#+LATEX: \end{center}
- (+) Menor custo de memória
- (-) Remoção necessita de dois ponteiros
- Complexidade do pior caso
  - Percorre a lista completa para inserir/remover (busca)
  - $\mathcal{O}(n)$
*** Lista Dupla
#+LATEX: \begin{center}
[[file:fig/listadoble.png]]
#+LATEX: \end{center}
- (+) Inserção imediata na última posição
- (-) Consome o *dobro* de memória para ponteiros
- Complexidade do pior caso
  - Percorre a lista até o penúltimo nó para inserir/remover (busca)
  - $\mathcal{O}(n - 1) = \mathcal{O}(n)$
* Implementação
** Descrição do código
*** Algoritmo
#+BEGIN_SRC c
for (qtd = 1; qtd <= MAX; qtd *= 2) { // mais pontos
    for (i = 0; i < (qtd / 2); ++i)   // (1e10)
        l=insercao_enc(rand() % MAX, l);

    time(&inicio_conta);
    for (i = 1; i <= CANT_TESTE; ++i) {
        num = rand() % MAX;
        l=insercao_enc(num,l);
        l=remocion_enc(num,l);
    }
    time(&fim_conta);
    total = fim_conta - inicio_conta;
}
#+END_SRC
*** Algoritmo
#+BEGIN_SRC c
for (qtd = 1; qtd <= MAX; qtd *= 2) {    
    for (i = 0; i < (qtd / 2); ++i) // completar a lista
        l=insercao_enc(rand() % MAX, l);

    time(&inicio_conta);
    for (i = 1; i <= CANT_TESTE; ++i) {
        num = rand() % MAX;
        l=insercao_enc(num,l);
        l=remocion_enc(num,l);
    }
    time(&fim_conta);
    total = fim_conta - inicio_conta;
}
#+END_SRC
*** Algoritmo
#+BEGIN_SRC c
for (qtd = 1; qtd <= MAX; qtd *= 2) {    
    for (i = 0; i < (qtd / 2); ++i)      
        l=insercao_enc(rand() % MAX, l); // insere números
                                         // aleatórios
    time(&inicio_conta);
    for (i = 1; i <= CANT_TESTE; ++i) {
        num = rand() % MAX;
        l=insercao_enc(num,l);
        l=remocion_enc(num,l);
    }
    time(&fim_conta);
    total = fim_conta - inicio_conta;
}
#+END_SRC
*** Algoritmo
#+BEGIN_SRC c
for (qtd = 1; qtd <= MAX; qtd *= 2) {
    for (i = 0; i < (qtd / 2); ++i)      
        l=insercao_enc(rand() % MAX, l); 
                                         
    time(&inicio_conta);
    for (i = 1; i <= CANT_TESTE; ++i) { // repetição foi
        num = rand() % MAX;             // necessária
        l=insercao_enc(num,l);          // (1e6)
        l=remocion_enc(num,l);
    }
    time(&fim_conta);
    total = fim_conta - inicio_conta;
}
#+END_SRC
* Resultados
** $t \times n$ --- Lista Simples
*** Lista Simples -- pontos iniciais: rapidez /vs./ precisão
|    $n$ |   $t$ |
|--------+-------|
|      1 |     0 |
|      2 |     0 |
|      4 |     0 |
|      8 |     0 |
|     16 |     0 |
|     32 |     0 |
|     64 |     1 |
|    128 |     0 |
*** Lista Simples -- a partir de $n = 256$
|    $n$ |   $t$ |
|--------+-------|
|    256 |     2 |
|    512 |     2 |
|   1024 |     5 |
|   2048 |    14 |
|   4096 |    30 |
|   8192 |    71 |
|  16384 |   253 |
|  32768 |   569 |
|  65536 |  1338 |
| 131072 |  5649 |
| 262144 | 23473 |
| 524288 | 63852 |
*** Lista Simples -- Gráfico
#+LATEX: \begin{center}
[[file:fig/listasimples-log.png][file:~/phd.algo/um/martha/fig/listasimples-log.png]]
#+LATEX: \end{center}
*** Lista Dupla -- pontos iniciais: rapidez /vs./ precisão
| $n$ | $t$ |
|-----+-----|
|   1 |   0 |
|   2 |   0 |
|   4 |   0 |
|   8 |   1 |
|  16 |   0 |
|  32 |   0 |
|  64 |   0 |
| 128 |   1 |
*** Lista Dupla -- a partir de $n = 256$
|    $n$ |   $t$ |
|--------+-------|
|    256 |     2 |
|    512 |     3 |
|   1024 |     5 |
|   2048 |    15 |
|   4096 |    34 |
|   8192 |    96 |
|  16384 |   267 |
|  32768 |   633 |
|  65536 |  1560 |
| 131072 |  6936 |
| 262144 | 22018 |
| 524288 | 61744 |
*** Lista Dupla -- Gráfico
#+LATEX: \begin{center}
[[file:fig/listasimples-log.png][file:~/phd.algo/um/martha/fig/listadupla-log.png]]
#+LATEX: \end{center}
*** Análise: desempenho equiparável (inesperado)
#+LATEX: \begin{center}
[[file:fig/compara.png][file:~/phd.algo/um/martha/fig/compara.png]]
#+LATEX: \end{center}
*** Possíveis razões
- Complexidade teórica considera *pior* caso, i.e., inserção sempre na
  última (simples) e penúltima (dupla) posições
- Experimento realizou inserções de números aleatórios
  - Posições aleatórias
- Resultado corresponde, portanto, à complexidade do *caso médio*,
  onde se espera que o desempenho seja equiparável
